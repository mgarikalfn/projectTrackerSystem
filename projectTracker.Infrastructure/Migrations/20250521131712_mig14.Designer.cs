// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTracker.Infrastructure.Data;

#nullable disable

namespace projectTracker.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521131712_mig14")]
    partial class mig14
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projectTracker.Domain.Aggregates.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lead")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("projectTracker.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StatusChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("StoryPoints")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeEstimateMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("Updated");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("projectTracker.Domain.Entities.SyncHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JiraDataCutoff")
                        .HasColumnType("datetime2");

                    b.Property<string>("JiraRequestId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SyncTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SyncTrigger")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TasksCreated")
                        .HasColumnType("int");

                    b.Property<int>("TasksProcessed")
                        .HasColumnType("int");

                    b.Property<int>("TasksUpdated")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.HasIndex("Status");

                    b.HasIndex("SyncTime");

                    b.HasIndex("ProjectId", "SyncTime");

                    b.ToTable("SyncHistory");
                });

            modelBuilder.Entity("projectTracker.Domain.Aggregates.Project", b =>
                {
                    b.OwnsOne("projectTracker.Domain.ValueObjects.ProgressMetrics", "Progress", b1 =>
                        {
                            b1.Property<string>("ProjectId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("ActiveBlockers")
                                .HasColumnType("int")
                                .HasColumnName("ActiveBlockers");

                            b1.Property<int>("CompletedTasks")
                                .HasColumnType("int")
                                .HasColumnName("CompletedTasks");

                            b1.Property<int>("RecentUpdates")
                                .HasColumnType("int")
                                .HasColumnName("RecentUpdates");

                            b1.Property<decimal>("StoryPointsCompleted")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("StoryPointsCompleted");

                            b1.Property<decimal>("StoryPointsTotal")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("StoryPointsTotal");

                            b1.Property<int>("TotalTasks")
                                .HasColumnType("int")
                                .HasColumnName("TotalTasks");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("projectTracker.Domain.ValueObjects.ProjectHealth", "Health", b1 =>
                        {
                            b1.Property<string>("ProjectId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Confidence")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("HealthConfidence");

                            b1.Property<string>("Level")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("HealthLevel");

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("HealthReason");

                            b1.Property<double?>("Score")
                                .HasColumnType("float")
                                .HasColumnName("HealthScore");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("Health")
                        .IsRequired();

                    b.Navigation("Progress")
                        .IsRequired();
                });

            modelBuilder.Entity("projectTracker.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("projectTracker.Domain.Aggregates.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("projectTracker.Domain.Entities.SyncHistory", b =>
                {
                    b.HasOne("projectTracker.Domain.Aggregates.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("projectTracker.Domain.Aggregates.Project", null)
                        .WithMany("SyncHistory")
                        .HasForeignKey("ProjectId1");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("projectTracker.Domain.Aggregates.Project", b =>
                {
                    b.Navigation("SyncHistory");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
